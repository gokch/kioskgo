// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server_service.proto

package rpcconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	rpc "github.com/rabbitprincess/ipfs_mount/rpc"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ServerServiceName is the fully-qualified name of the ServerService service.
	ServerServiceName = "proto.ServerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServerServiceRegisterProcedure is the fully-qualified name of the ServerService's Register RPC.
	ServerServiceRegisterProcedure = "/proto.ServerService/Register"
	// ServerServiceFindAndProvideProcedure is the fully-qualified name of the ServerService's
	// FindAndProvide RPC.
	ServerServiceFindAndProvideProcedure = "/proto.ServerService/FindAndProvide"
)

// ServerServiceClient is a client for the proto.ServerService service.
type ServerServiceClient interface {
	Register(context.Context, *connect_go.Request[rpc.RegisterRequest]) (*connect_go.Response[rpc.RegisterResponse], error)
	FindAndProvide(context.Context, *connect_go.Request[rpc.FindAndProvideRequest]) (*connect_go.Response[rpc.FindAndProvideResponse], error)
}

// NewServerServiceClient constructs a client for the proto.ServerService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ServerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serverServiceClient{
		register: connect_go.NewClient[rpc.RegisterRequest, rpc.RegisterResponse](
			httpClient,
			baseURL+ServerServiceRegisterProcedure,
			opts...,
		),
		findAndProvide: connect_go.NewClient[rpc.FindAndProvideRequest, rpc.FindAndProvideResponse](
			httpClient,
			baseURL+ServerServiceFindAndProvideProcedure,
			opts...,
		),
	}
}

// serverServiceClient implements ServerServiceClient.
type serverServiceClient struct {
	register       *connect_go.Client[rpc.RegisterRequest, rpc.RegisterResponse]
	findAndProvide *connect_go.Client[rpc.FindAndProvideRequest, rpc.FindAndProvideResponse]
}

// Register calls proto.ServerService.Register.
func (c *serverServiceClient) Register(ctx context.Context, req *connect_go.Request[rpc.RegisterRequest]) (*connect_go.Response[rpc.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// FindAndProvide calls proto.ServerService.FindAndProvide.
func (c *serverServiceClient) FindAndProvide(ctx context.Context, req *connect_go.Request[rpc.FindAndProvideRequest]) (*connect_go.Response[rpc.FindAndProvideResponse], error) {
	return c.findAndProvide.CallUnary(ctx, req)
}

// ServerServiceHandler is an implementation of the proto.ServerService service.
type ServerServiceHandler interface {
	Register(context.Context, *connect_go.Request[rpc.RegisterRequest]) (*connect_go.Response[rpc.RegisterResponse], error)
	FindAndProvide(context.Context, *connect_go.Request[rpc.FindAndProvideRequest]) (*connect_go.Response[rpc.FindAndProvideResponse], error)
}

// NewServerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServerServiceHandler(svc ServerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ServerServiceRegisterProcedure, connect_go.NewUnaryHandler(
		ServerServiceRegisterProcedure,
		svc.Register,
		opts...,
	))
	mux.Handle(ServerServiceFindAndProvideProcedure, connect_go.NewUnaryHandler(
		ServerServiceFindAndProvideProcedure,
		svc.FindAndProvide,
		opts...,
	))
	return "/proto.ServerService/", mux
}

// UnimplementedServerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServerServiceHandler struct{}

func (UnimplementedServerServiceHandler) Register(context.Context, *connect_go.Request[rpc.RegisterRequest]) (*connect_go.Response[rpc.RegisterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.ServerService.Register is not implemented"))
}

func (UnimplementedServerServiceHandler) FindAndProvide(context.Context, *connect_go.Request[rpc.FindAndProvideRequest]) (*connect_go.Response[rpc.FindAndProvideResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.ServerService.FindAndProvide is not implemented"))
}
